{"remainingRequest":"/app/node_modules/babel-loader/lib/index.js??ref--7-1!/app/src/theme/SearchBar/lib/utils.js","dependencies":[{"path":"/app/src/theme/SearchBar/lib/utils.js","mtime":1601410599000},{"path":"/app/node_modules/cache-loader/dist/cjs.js","mtime":1601410591000},{"path":"/app/node_modules/babel-loader/lib/index.js","mtime":1601410591000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["/app/src/theme/SearchBar/lib/utils.js"],"names":["$","utils","mergeKeyWithParent","object","property","undefined","newObject","extend","groupBy","collection","newCollection","each","index","item","Error","key","toLowerCase","Object","prototype","hasOwnProperty","call","push","values","keys","map","flatten","array","results","forEach","value","Array","isArray","subvalue","flattenAndFlagFirst","flag","compact","getHighlightedValue","_highlightResult","hierarchy_camel","matchLevel","getSnippetedValue","_snippetResult","snippet","toUpperCase","indexOf","length","deepClone","JSON","parse","stringify"],"mappings":"AAAA,MAAOA,CAAAA,CAAP,KAAc,uBAAd,CAEA,KAAMC,CAAAA,KAAK,CAAG,CACZ;;;;;;;;;;;;;;;;;;;;IAqBAC,kBAAkB,CAACC,MAAD,CAASC,QAAT,CAAmB,CACnC,GAAID,MAAM,CAACC,QAAD,CAAN,GAAqBC,SAAzB,CAAoC,CAClC,MAAOF,CAAAA,MAAP,CACD,CACD,GAAI,MAAOA,CAAAA,MAAM,CAACC,QAAD,CAAb,GAA4B,QAAhC,CAA0C,CACxC,MAAOD,CAAAA,MAAP,CACD,CACD,KAAMG,CAAAA,SAAS,CAAGN,CAAC,CAACO,MAAF,CAAS,EAAT,CAAaJ,MAAb,CAAqBA,MAAM,CAACC,QAAD,CAA3B,CAAlB,CACA,MAAOE,CAAAA,SAAS,CAACF,QAAD,CAAhB,CACA,MAAOE,CAAAA,SAAP,CACD,CAhCW,CAiCZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA+BAE,OAAO,CAACC,UAAD,CAAaL,QAAb,CAAuB,CAC5B,KAAMM,CAAAA,aAAa,CAAG,EAAtB,CACAV,CAAC,CAACW,IAAF,CAAOF,UAAP,CAAmB,CAACG,KAAD,CAAQC,IAAR,GAAiB,CAClC,GAAIA,IAAI,CAACT,QAAD,CAAJ,GAAmBC,SAAvB,CAAkC,CAChC,KAAM,IAAIS,CAAAA,KAAJ,CAAW,gCAA+BV,QAAS,EAAnD,CAAN,CACD,CACD,GAAIW,CAAAA,GAAG,CAAGF,IAAI,CAACT,QAAD,CAAd,CACA,GAAI,MAAOW,CAAAA,GAAP,GAAe,QAAnB,CAA6B,CAC3BA,GAAG,CAAGA,GAAG,CAACC,WAAJ,EAAN,CACD,CACD;AACA;AACA,GAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqCV,aAArC,CAAoDK,GAApD,CAAL,CAA+D,CAC7DL,aAAa,CAACK,GAAD,CAAb,CAAqB,EAArB,CACD,CACDL,aAAa,CAACK,GAAD,CAAb,CAAmBM,IAAnB,CAAwBR,IAAxB,EACD,CAdD,EAeA,MAAOH,CAAAA,aAAP,CACD,CAlFW,CAmFZ;;;;;;;;;;;;IAaAY,MAAM,CAACnB,MAAD,CAAS,CACb,MAAOc,CAAAA,MAAM,CAACM,IAAP,CAAYpB,MAAZ,EAAoBqB,GAApB,CAAwBT,GAAG,EAAIZ,MAAM,CAACY,GAAD,CAArC,CAAP,CACD,CAlGW,CAmGZ;;;;;;;;IASAU,OAAO,CAACC,KAAD,CAAQ,CACb,KAAMC,CAAAA,OAAO,CAAG,EAAhB,CACAD,KAAK,CAACE,OAAN,CAAcC,KAAK,EAAI,CACrB,GAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,CAA2B,CACzBF,OAAO,CAACN,IAAR,CAAaQ,KAAb,EACA,OACD,CACDA,KAAK,CAACD,OAAN,CAAcI,QAAQ,EAAI,CACxBL,OAAO,CAACN,IAAR,CAAaW,QAAb,EACD,CAFD,EAGD,CARD,EASA,MAAOL,CAAAA,OAAP,CACD,CAxHW,CAyHZ;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA6BAM,mBAAmB,CAAC9B,MAAD,CAAS+B,IAAT,CAAe,CAChC,KAAMZ,CAAAA,MAAM,CAAG,KAAKA,MAAL,CAAYnB,MAAZ,EAAoBqB,GAApB,CAAwBf,UAAU,EAC/CA,UAAU,CAACe,GAAX,CAAe,CAACX,IAAD,CAAOD,KAAP,GAAiB,CAC9B;AACAC,IAAI,CAACqB,IAAD,CAAJ,CAAatB,KAAK,GAAK,CAAvB,CACA,MAAOC,CAAAA,IAAP,CACD,CAJD,CADa,CAAf,CAOA,MAAO,MAAKY,OAAL,CAAaH,MAAb,CAAP,CACD,CA/JW,CAgKZ;;;;;;;;IASAa,OAAO,CAACT,KAAD,CAAQ,CACb,KAAMC,CAAAA,OAAO,CAAG,EAAhB,CACAD,KAAK,CAACE,OAAN,CAAcC,KAAK,EAAI,CACrB,GAAI,CAACA,KAAL,CAAY,CACV,OACD,CACDF,OAAO,CAACN,IAAR,CAAaQ,KAAb,EACD,CALD,EAMA,MAAOF,CAAAA,OAAP,CACD,CAlLW,CAmLZ;;;;;;;;;;;;;;;;;MAkBAS,mBAAmB,CAACjC,MAAD,CAASC,QAAT,CAAmB,CACpC,GACED,MAAM,CAACkC,gBAAP,EACAlC,MAAM,CAACkC,gBAAP,CAAwBC,eADxB,EAEAnC,MAAM,CAACkC,gBAAP,CAAwBC,eAAxB,CAAwClC,QAAxC,CAFA,EAGAD,MAAM,CAACkC,gBAAP,CAAwBC,eAAxB,CAAwClC,QAAxC,EAAkDmC,UAHlD,EAIApC,MAAM,CAACkC,gBAAP,CAAwBC,eAAxB,CAAwClC,QAAxC,EAAkDmC,UAAlD,GAAiE,MAJjE,EAKApC,MAAM,CAACkC,gBAAP,CAAwBC,eAAxB,CAAwClC,QAAxC,EAAkDyB,KANpD,CAOE,CACA,MAAO1B,CAAAA,MAAM,CAACkC,gBAAP,CAAwBC,eAAxB,CAAwClC,QAAxC,EAAkDyB,KAAzD,CACD,CACD,GACE1B,MAAM,CAACkC,gBAAP,EACAlC,MAAM,CAACkC,gBADP,EAEAlC,MAAM,CAACkC,gBAAP,CAAwBjC,QAAxB,CAFA,EAGAD,MAAM,CAACkC,gBAAP,CAAwBjC,QAAxB,EAAkCyB,KAJpC,CAKE,CACA,MAAO1B,CAAAA,MAAM,CAACkC,gBAAP,CAAwBjC,QAAxB,EAAkCyB,KAAzC,CACD,CACD,MAAO1B,CAAAA,MAAM,CAACC,QAAD,CAAb,CACD,CAzNW,CA0NZ;;;;;;;;;;;;;;;;;;;MAoBAoC,iBAAiB,CAACrC,MAAD,CAASC,QAAT,CAAmB,CAClC,GACE,CAACD,MAAM,CAACsC,cAAR,EACA,CAACtC,MAAM,CAACsC,cAAP,CAAsBrC,QAAtB,CADD,EAEA,CAACD,MAAM,CAACsC,cAAP,CAAsBrC,QAAtB,EAAgCyB,KAHnC,CAIE,CACA,MAAO1B,CAAAA,MAAM,CAACC,QAAD,CAAb,CACD,CACD,GAAIsC,CAAAA,OAAO,CAAGvC,MAAM,CAACsC,cAAP,CAAsBrC,QAAtB,EAAgCyB,KAA9C,CAEA,GAAIa,OAAO,CAAC,CAAD,CAAP,GAAeA,OAAO,CAAC,CAAD,CAAP,CAAWC,WAAX,EAAnB,CAA6C,CAC3CD,OAAO,CAAI,IAAGA,OAAQ,EAAtB,CACD,CACD,GAAI,CAAC,GAAD,CAAM,GAAN,CAAW,GAAX,EAAgBE,OAAhB,CAAwBF,OAAO,CAACA,OAAO,CAACG,MAAR,CAAiB,CAAlB,CAA/B,IAAyD,CAAC,CAA9D,CAAiE,CAC/DH,OAAO,CAAI,GAAEA,OAAQ,GAArB,CACD,CACD,MAAOA,CAAAA,OAAP,CACD,CA/PW,CAgQZ;;;;;IAMAI,SAAS,CAAC3C,MAAD,CAAS,CAChB,MAAO4C,CAAAA,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAe9C,MAAf,CAAX,CAAP,CACD,CAxQW,CAAd,CA2QA,cAAeF,CAAAA,KAAf","sourcesContent":["import $ from \"autocomplete.js/zepto\";\r\n\r\nconst utils = {\r\n  /*\r\n  * Move the content of an object key one level higher.\r\n  * eg.\r\n  * {\r\n  *   name: 'My name',\r\n  *   hierarchy: {\r\n  *     lvl0: 'Foo',\r\n  *     lvl1: 'Bar'\r\n  *   }\r\n  * }\r\n  * Will be converted to\r\n  * {\r\n  *   name: 'My name',\r\n  *   lvl0: 'Foo',\r\n  *   lvl1: 'Bar'\r\n  * }\r\n  * @param {Object} object Main object\r\n  * @param {String} property Main object key to move up\r\n  * @return {Object}\r\n  * @throws Error when key is not an attribute of Object or is not an object itself\r\n  */\r\n  mergeKeyWithParent(object, property) {\r\n    if (object[property] === undefined) {\r\n      return object;\r\n    }\r\n    if (typeof object[property] !== 'object') {\r\n      return object;\r\n    }\r\n    const newObject = $.extend({}, object, object[property]);\r\n    delete newObject[property];\r\n    return newObject;\r\n  },\r\n  /*\r\n  * Group all objects of a collection by the value of the specified attribute\r\n  * If the attribute is a string, use the lowercase form.\r\n  *\r\n  * eg.\r\n  * groupBy([\r\n  *   {name: 'Tim', category: 'dev'},\r\n  *   {name: 'Vincent', category: 'dev'},\r\n  *   {name: 'Ben', category: 'sales'},\r\n  *   {name: 'Jeremy', category: 'sales'},\r\n  *   {name: 'AlexS', category: 'dev'},\r\n  *   {name: 'AlexK', category: 'sales'}\r\n  * ], 'category');\r\n  * =>\r\n  * {\r\n  *   'devs': [\r\n  *     {name: 'Tim', category: 'dev'},\r\n  *     {name: 'Vincent', category: 'dev'},\r\n  *     {name: 'AlexS', category: 'dev'}\r\n  *   ],\r\n  *   'sales': [\r\n  *     {name: 'Ben', category: 'sales'},\r\n  *     {name: 'Jeremy', category: 'sales'},\r\n  *     {name: 'AlexK', category: 'sales'}\r\n  *   ]\r\n  * }\r\n  * @param {array} collection Array of objects to group\r\n  * @param {String} property The attribute on which apply the grouping\r\n  * @return {array}\r\n  * @throws Error when one of the element does not have the specified property\r\n  */\r\n  groupBy(collection, property) {\r\n    const newCollection = {};\r\n    $.each(collection, (index, item) => {\r\n      if (item[property] === undefined) {\r\n        throw new Error(`[groupBy]: Object has no key ${property}`);\r\n      }\r\n      let key = item[property];\r\n      if (typeof key === 'string') {\r\n        key = key.toLowerCase();\r\n      }\r\n      // fix #171 the given data type of docsearch hits might be conflict with the properties of the native Object,\r\n      // such as the constructor, so we need to do this check.\r\n      if (!Object.prototype.hasOwnProperty.call(newCollection, key)) {\r\n        newCollection[key] = [];\r\n      }\r\n      newCollection[key].push(item);\r\n    });\r\n    return newCollection;\r\n  },\r\n  /*\r\n  * Return an array of all the values of the specified object\r\n  * eg.\r\n  * values({\r\n  *   foo: 42,\r\n  *   bar: true,\r\n  *   baz: 'yep'\r\n  * })\r\n  * =>\r\n  * [42, true, yep]\r\n  * @param {object} object Object to extract values from\r\n  * @return {array}\r\n  */\r\n  values(object) {\r\n    return Object.keys(object).map(key => object[key]);\r\n  },\r\n  /*\r\n  * Flattens an array\r\n  * eg.\r\n  * flatten([1, 2, [3, 4], [5, 6]])\r\n  * =>\r\n  * [1, 2, 3, 4, 5, 6]\r\n  * @param {array} array Array to flatten\r\n  * @return {array}\r\n  */\r\n  flatten(array) {\r\n    const results = [];\r\n    array.forEach(value => {\r\n      if (!Array.isArray(value)) {\r\n        results.push(value);\r\n        return;\r\n      }\r\n      value.forEach(subvalue => {\r\n        results.push(subvalue);\r\n      });\r\n    });\r\n    return results;\r\n  },\r\n  /*\r\n  * Flatten all values of an object into an array, marking each first element of\r\n  * each group with a specific flag\r\n  * eg.\r\n  * flattenAndFlagFirst({\r\n  *   'devs': [\r\n  *     {name: 'Tim', category: 'dev'},\r\n  *     {name: 'Vincent', category: 'dev'},\r\n  *     {name: 'AlexS', category: 'dev'}\r\n  *   ],\r\n  *   'sales': [\r\n  *     {name: 'Ben', category: 'sales'},\r\n  *     {name: 'Jeremy', category: 'sales'},\r\n  *     {name: 'AlexK', category: 'sales'}\r\n  *   ]\r\n  * , 'isTop');\r\n  * =>\r\n  * [\r\n  *     {name: 'Tim', category: 'dev', isTop: true},\r\n  *     {name: 'Vincent', category: 'dev', isTop: false},\r\n  *     {name: 'AlexS', category: 'dev', isTop: false},\r\n  *     {name: 'Ben', category: 'sales', isTop: true},\r\n  *     {name: 'Jeremy', category: 'sales', isTop: false},\r\n  *     {name: 'AlexK', category: 'sales', isTop: false}\r\n  * ]\r\n  * @param {object} object Object to flatten\r\n  * @param {string} flag Flag to set to true on first element of each group\r\n  * @return {array}\r\n  */\r\n  flattenAndFlagFirst(object, flag) {\r\n    const values = this.values(object).map(collection =>\r\n      collection.map((item, index) => {\r\n        // eslint-disable-next-line no-param-reassign\r\n        item[flag] = index === 0;\r\n        return item;\r\n      })\r\n    );\r\n    return this.flatten(values);\r\n  },\r\n  /*\r\n  * Removes all empty strings, null, false and undefined elements array\r\n  * eg.\r\n  * compact([42, false, null, undefined, '', [], 'foo']);\r\n  * =>\r\n  * [42, [], 'foo']\r\n  * @param {array} array Array to compact\r\n  * @return {array}\r\n  */\r\n  compact(array) {\r\n    const results = [];\r\n    array.forEach(value => {\r\n      if (!value) {\r\n        return;\r\n      }\r\n      results.push(value);\r\n    });\r\n    return results;\r\n  },\r\n  /*\r\n   * Returns the highlighted value of the specified key in the specified object.\r\n   * If no highlighted value is available, will return the key value directly\r\n   * eg.\r\n   * getHighlightedValue({\r\n   *    _highlightResult: {\r\n   *      text: {\r\n   *        value: '<mark>foo</mark>'\r\n   *      }\r\n   *    },\r\n   *    text: 'foo'\r\n   * }, 'text');\r\n   * =>\r\n   * '<mark>foo</mark>'\r\n   * @param {object} object Hit object returned by the Algolia API\r\n   * @param {string} property Object key to look for\r\n   * @return {string}\r\n   **/\r\n  getHighlightedValue(object, property) {\r\n    if (\r\n      object._highlightResult &&\r\n      object._highlightResult.hierarchy_camel &&\r\n      object._highlightResult.hierarchy_camel[property] &&\r\n      object._highlightResult.hierarchy_camel[property].matchLevel &&\r\n      object._highlightResult.hierarchy_camel[property].matchLevel !== 'none' &&\r\n      object._highlightResult.hierarchy_camel[property].value\r\n    ) {\r\n      return object._highlightResult.hierarchy_camel[property].value;\r\n    }\r\n    if (\r\n      object._highlightResult &&\r\n      object._highlightResult &&\r\n      object._highlightResult[property] &&\r\n      object._highlightResult[property].value\r\n    ) {\r\n      return object._highlightResult[property].value;\r\n    }\r\n    return object[property];\r\n  },\r\n  /*\r\n   * Returns the snippeted value of the specified key in the specified object.\r\n   * If no highlighted value is available, will return the key value directly.\r\n   * Will add starting and ending ellipsis (…) if we detect that a sentence is\r\n   * incomplete\r\n   * eg.\r\n   * getSnippetedValue({\r\n   *    _snippetResult: {\r\n   *      text: {\r\n   *        value: '<mark>This is an unfinished sentence</mark>'\r\n   *      }\r\n   *    },\r\n   *    text: 'This is an unfinished sentence'\r\n   * }, 'text');\r\n   * =>\r\n   * '<mark>This is an unfinished sentence</mark>…'\r\n   * @param {object} object Hit object returned by the Algolia API\r\n   * @param {string} property Object key to look for\r\n   * @return {string}\r\n   **/\r\n  getSnippetedValue(object, property) {\r\n    if (\r\n      !object._snippetResult ||\r\n      !object._snippetResult[property] ||\r\n      !object._snippetResult[property].value\r\n    ) {\r\n      return object[property];\r\n    }\r\n    let snippet = object._snippetResult[property].value;\r\n\r\n    if (snippet[0] !== snippet[0].toUpperCase()) {\r\n      snippet = `…${snippet}`;\r\n    }\r\n    if (['.', '!', '?'].indexOf(snippet[snippet.length - 1]) === -1) {\r\n      snippet = `${snippet}…`;\r\n    }\r\n    return snippet;\r\n  },\r\n  /*\r\n  * Deep clone an object.\r\n  * Note: This will not clone functions and dates\r\n  * @param {object} object Object to clone\r\n  * @return {object}\r\n  */\r\n  deepClone(object) {\r\n    return JSON.parse(JSON.stringify(object));\r\n  },\r\n};\r\n\r\nexport default utils;\r\n"]}]}